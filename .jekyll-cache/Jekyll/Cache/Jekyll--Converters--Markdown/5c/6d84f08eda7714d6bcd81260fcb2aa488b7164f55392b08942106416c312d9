I"9I<p>首先大家看下面一段代码：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">arrayRotate</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">src</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">dst</span><span class="p">(</span><span class="n">src</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
	<span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">src</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="o">!=</span> <span class="n">iter</span><span class="p">;</span> <span class="n">iter</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">dst</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">*</span><span class="n">iter</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">dst</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>如果能一眼发现哪里写错了，那么可以不用往下看了（手动狗头）</p>

<p>如果在VC中编译会提示<code class="language-plaintext highlighter-rouge">for (std::vector&lt;T&gt;::iterator iter = src.begin(); src.end() != iter; iter++)</code>这一行少了个<code class="language-plaintext highlighter-rouge">;</code>，但这明显不可能，仔细看下行中每个<code class="language-plaintext highlighter-rouge">token</code>的<code class="language-plaintext highlighter-rouge">Code IntelliSense</code>会发现在<code class="language-plaintext highlighter-rouge">iter</code>这个词上会提示<code class="language-plaintext highlighter-rouge">&lt;error-type&gt; iter</code>，那么问题很明显了，<code class="language-plaintext highlighter-rouge">std::vector&lt;T&gt;::iterator</code>这个类型无法别编译器确定。解决方案就很简单了，直接在前面加上<code class="language-plaintext highlighter-rouge">typename</code>以表明这是一个<strong>类型名字</strong>：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">for</span> <span class="p">(</span><span class="k">typename</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">src</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="o">!=</span> <span class="n">iter</span><span class="p">;</span> <span class="n">iter</span><span class="o">++</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>再次编译，问题解决。（《C++ Primer》提到这里不能用<code class="language-plaintext highlighter-rouge">class</code>来代替<code class="language-plaintext highlighter-rouge">typename</code>[3]，但我在VC2019中测试过这里不用<code class="language-plaintext highlighter-rouge">typename</code>而使用<code class="language-plaintext highlighter-rouge">class</code>也是可以的，可能是微软为了兼容早期<code class="language-plaintext highlighter-rouge">C++</code>中并没有<code class="language-plaintext highlighter-rouge">typename</code>的情况，在其他编译器中不一定可以通过，因此你也应当尽量只使用<code class="language-plaintext highlighter-rouge">typename</code>）</p>

<p>那么接下来我们就来探讨一下这个<code class="language-plaintext highlighter-rouge">C++ Template</code>中比较容易被忽略的问题之一：<code class="language-plaintext highlighter-rouge">typename</code>关键字。</p>

<h2 id="1-关键字typename">1 关键字<code class="language-plaintext highlighter-rouge">typename</code></h2>
<p>看下面这个例子：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>
    <span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">SubType</span> <span class="o">*</span> <span class="n">ptr</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>这里和本文开头有问题程序中的<code class="language-plaintext highlighter-rouge">std::vector&lt;T&gt;::iterator</code>要使用<code class="language-plaintext highlighter-rouge">typename</code>的目的是一样的，<code class="language-plaintext highlighter-rouge">typename</code>是为了说明<strong>模板内部的标识符可以是一个类型</strong>。<code class="language-plaintext highlighter-rouge">SubType</code>是定义在类<code class="language-plaintext highlighter-rouge">T</code>内部的一种类型。因此，<code class="language-plaintext highlighter-rouge">ptr</code>是一个指向<code class="language-plaintext highlighter-rouge">T::SubType</code>类型的指针。如果不使用<code class="language-plaintext highlighter-rouge">typename</code>，那么<code class="language-plaintext highlighter-rouge">SubType</code>就会被认为是一个静态成员，那么它就会被解析成具体的变量或者对象，于是<code class="language-plaintext highlighter-rouge">T::SubType * ptr</code>就会被看作是类T的静态成员<code class="language-plaintext highlighter-rouge">SubType</code>和<code class="language-plaintext highlighter-rouge">ptr</code>的乘积[1]。</p>

<h2 id="2-template和-template">2 <code class="language-plaintext highlighter-rouge">.template</code>和<code class="language-plaintext highlighter-rouge">-&gt;template</code></h2>
<p>看下面这个例子：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">template</span> <span class="o">&lt;</span><span class="kt">int</span> <span class="n">N</span><span class="p">&gt;</span>
<span class="kt">void</span> <span class="nf">printBitset</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">bitset</span><span class="o">&lt;</span><span class="n">N</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">bs</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">bs</span><span class="p">.</span><span class="k">template</span> <span class="n">to_string</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="n">char_traits</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">&gt;,</span> <span class="n">allocator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>其实这段代码本意是想调用<code class="language-plaintext highlighter-rouge">bs</code>的<code class="language-plaintext highlighter-rouge">to_string</code>成员函数，这个成员函数原型是这样的(注：在<code class="language-plaintext highlighter-rouge">C++ 11</code>以前，这个函数叫做<code class="language-plaintext highlighter-rouge">basic_string</code>，于<code class="language-plaintext highlighter-rouge">C++ 11</code>改名为<code class="language-plaintext highlighter-rouge">to_string</code>)：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="k">template</span><span class="o">&lt;</span>
    <span class="k">class</span> <span class="nc">CharT</span> <span class="o">=</span> <span class="kt">char</span><span class="p">,</span>
    <span class="k">class</span> <span class="nc">Traits</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">char_traits</span><span class="o">&lt;</span><span class="n">CharT</span><span class="p">&gt;,</span>
    <span class="k">class</span> <span class="nc">Allocator</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">allocator</span><span class="o">&lt;</span><span class="n">CharT</span><span class="o">&gt;</span>
<span class="o">&gt;</span> <span class="n">std</span><span class="o">::</span><span class="n">basic_string</span><span class="o">&lt;</span><span class="n">CharT</span><span class="p">,</span><span class="n">Traits</span><span class="p">,</span><span class="n">Allocator</span><span class="o">&gt;</span>
    <span class="n">to_string</span><span class="p">(</span><span class="n">CharT</span> <span class="n">zero</span> <span class="o">=</span> <span class="n">CharT</span><span class="p">(</span><span class="sc">'0'</span><span class="p">),</span> <span class="n">CharT</span> <span class="n">one</span> <span class="o">=</span> <span class="n">CharT</span><span class="p">(</span><span class="sc">'1'</span><span class="p">))</span> <span class="k">const</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>那么这里为何不直接调用<code class="language-plaintext highlighter-rouge">bs.to_string</code>而要插入一个奇怪的<code class="language-plaintext highlighter-rouge">.template</code>声明呢？原因在于<strong>这里传入参数bs是依赖于模板参数N构造的</strong>，如果没有这个声明，编译器无法确定后面的小于号(<code class="language-plaintext highlighter-rouge">&lt;</code>)并不是数学中的小于号，而是模板是参列表的起始符号[1]。</p>

<p>因此，我们不难总结出，<strong>只有当前面存在依赖于模板参数的对象时，才需要在模板内部使用<code class="language-plaintext highlighter-rouge">.template</code>或者<code class="language-plaintext highlighter-rouge">-&gt;template</code>来避免产生<code class="language-plaintext highlighter-rouge">二义性</code></strong></p>

<h2 id="3-产生二义性的原因">3 产生二义性的原因</h2>
<p>其实前文已经提到，产生二义性的原因主要是因为这些地方都是跟模板参数有关的。在引入模板以后，我们可以把<code class="language-plaintext highlighter-rouge">C++</code>中的<code class="language-plaintext highlighter-rouge">name</code>分为两种：<code class="language-plaintext highlighter-rouge">Dependent names</code>和<code class="language-plaintext highlighter-rouge">Non-dependent names</code>[2]。所谓<code class="language-plaintext highlighter-rouge">Non-dependent names</code>顾名思义就是完全独立的名字，而<code class="language-plaintext highlighter-rouge">Dependent names</code>就是受制于模板参数影响的名字，在模板<code class="language-plaintext highlighter-rouge">具象化</code>之前是是无法真正确定这个名字含义的。(有的地方可能会使用<code class="language-plaintext highlighter-rouge">实例化</code>这个词，但我更偏好于<code class="language-plaintext highlighter-rouge">具象化</code>，以区别于类的实例化)因此就需要一些额外的语法来保证编译器正确工作。</p>

<h2 id="4-其他语言的处理方式">4 其他语言的处理方式</h2>
<p>这套规则查看下总感觉没那么智能，而且有传言本来<code class="language-plaintext highlighter-rouge">C++ 11</code>是要优化这个问题的[2]，但似乎现在其实没有太大改变。那么我们来看看同样具有template语法的Java是如何处理这个问题的吧。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Pair</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="no">T</span> <span class="n">value</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">SubType</span> <span class="n">subObject</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Pair</span><span class="o">(</span><span class="no">T</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
        <span class="n">subObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SubType</span><span class="o">();</span>
        <span class="n">subObject</span><span class="o">.</span><span class="na">subValue</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubType</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kt">int</span> <span class="n">subValue</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">SubType</span> <span class="nf">getSubObject</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">subObject</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Pair</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">pair</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pair</span><span class="o">&lt;&gt;(</span><span class="mi">666</span><span class="o">);</span>
        <span class="nc">Pair</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;.</span><span class="na">SubType</span> <span class="n">subObject</span> <span class="o">=</span> <span class="n">pair</span><span class="o">.</span><span class="na">getSubObject</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">subObject</span><span class="o">.</span><span class="na">subValue</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>
<p>这里并没有类似<code class="language-plaintext highlighter-rouge">C++</code>中的<code class="language-plaintext highlighter-rouge">typename</code>这样的关键字，编译，运行，成功获得结果：</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>1000
</pre></td></tr></tbody></table></code></pre></div></div>
<p>看来<code class="language-plaintext highlighter-rouge">Java</code>中并没有<code class="language-plaintext highlighter-rouge">C++</code>那么多的约束，但这实际上是因为<code class="language-plaintext highlighter-rouge">Java</code>中没有<code class="language-plaintext highlighter-rouge">模板特化(Template Specialize)</code>这种东西，呃，这又是一个很大的话题了，以后有机会再说吧（笑）。</p>

<p>画外音：这次标题怎么又是这个句式Orz</p>

<p>参考文献：
[1] 《C++ Templates》, [美]David Vandevoorde [德]Nicolai M. Josuttis, 陈伟柱 译, 人民邮电出版社, 2013
[2] 《A Description of the C++ typename keyword》, Evan Driscoll, http://pages.cs.wisc.edu/~driscoll/typename.html
[3] 《C++ Primer 5e》, Stanley B. Lippman, 《电子工业出版社》,  2013.9</p>
:ET