I"'<p>最近碰到了一个奇怪的跨平台代码：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1">// no strnlen on some OSes (Mac OS)</span>
<span class="cp">#if !HAVE_STRNLEN
</span><span class="kt">size_t</span> <span class="nf">strnlen</span> <span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">iMaxLen</span> <span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">s</span> <span class="p">)</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

	<span class="kt">size_t</span> <span class="n">iRes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">while</span> <span class="p">(</span> <span class="o">*</span><span class="n">s</span><span class="o">++</span> <span class="o">&amp;&amp;</span> <span class="n">iRes</span><span class="o">&lt;</span><span class="n">iMaxLen</span> <span class="p">)</span>
		<span class="o">++</span><span class="n">iRes</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">iRes</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">#endif
</span></pre></td></tr></tbody></table></code></pre></div></div>
<p>看注释的意思似乎是在防止某些操作系统下没有<code class="language-plaintext highlighter-rouge">strnlen</code>函数而设置的跨平台代码。看括号里举的例子，似乎是<code class="language-plaintext highlighter-rouge">OSX</code>中不存在。查了一下<code class="language-plaintext highlighter-rouge">strnlen</code>是一个<code class="language-plaintext highlighter-rouge">GNU</code>扩展函数，并且在<a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/strnlen.html">POSIX (IEEE Std 1003.1-2008)</a>中有明确规范。不过确实是早期的OSX中并没有这个函数，因此才会有这样的写法。（从<code class="language-plaintext highlighter-rouge">OSX 10.7</code>以后才有）</p>

<p>既然这样就好说了，我也不用担心在哪个平台，如果操作系统没有这个函数自然就会自己定义一个。但奇怪的事情出现了，在Windows下编译竟然会出现如下错误：</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>fatal error LNK1169: 找到一个或多个多重定义的符号
</pre></td></tr></tbody></table></code></pre></div></div>
<p>查了一下是<code class="language-plaintext highlighter-rouge">strnlen</code>被重复定义了。这么看来<code class="language-plaintext highlighter-rouge">Windows</code>下应该是已经有这个函数了，但为何这段跨平台代码失效了呢？很明显这里问题出在<code class="language-plaintext highlighter-rouge">HAVE_STRNLEN</code>的宏其实没有被定义。</p>

<p>那么问题来了，<code class="language-plaintext highlighter-rouge">HAVE_STRNLEN</code>这个宏是怎么来的？很明显这应该是在项目编译前的<code class="language-plaintext highlighter-rouge">config</code>时定义的。看了一下项目的<code class="language-plaintext highlighter-rouge">cmake</code>的写法：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="cm">/* Define to 1 if you have the `strnlen' function. */</span>
<span class="cp">#cmakedefine HAVE_STRNLEN ${HAVE_STRNLEN}
</span></pre></td></tr></tbody></table></code></pre></div></div>
<p>有这么一段,可以看出<code class="language-plaintext highlighter-rouge">cmake</code>里是通过确认变量<code class="language-plaintext highlighter-rouge">${HAVE_STRNLEN}</code>来检查函数是否存在的。而这个变量又是通过下面代码进行赋值：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="n">include</span> <span class="p">(</span><span class="n">CheckFunctionExists</span><span class="p">)</span>
<span class="n">macro</span> <span class="p">(</span><span class="n">ac_check_funcs</span> <span class="n">_FUNCTIONS</span><span class="p">)</span>
	<span class="n">foreach</span> <span class="p">(</span><span class="n">it</span> <span class="err">$</span><span class="p">{</span><span class="n">_FUNCTIONS</span><span class="p">})</span>
		<span class="n">string</span><span class="p">(</span><span class="n">TOUPPER</span> <span class="s">"${it}"</span> <span class="n">_it</span><span class="p">)</span>
		<span class="n">check_function_exists</span> <span class="p">(</span><span class="s">"${it}"</span> <span class="s">"HAVE_${_it}"</span><span class="p">)</span>
	<span class="n">endforeach</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
<span class="n">endmacro</span><span class="p">(</span><span class="n">ac_check_funcs</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>并能看到如下代码：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">AC_CHECK_FUNCS</span><span class="p">([</span><span class="n">dup2</span> <span class="n">gethostbyname</span> <span class="n">gettimeofday</span> <span class="n">memmove</span> <span class="n">memset</span> <span class="n">select</span> <span class="n">socket</span> <span class="n">strcasecmp</span> <span class="n">strchr</span> <span class="n">strerror</span> <span class="n">strncasecmp</span> <span class="n">strnlen</span> <span class="n">strstr</span> <span class="n">strtol</span> <span class="n">logf</span> <span class="n">pread</span> <span class="n">poll</span><span class="p">])</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>其中可以看到函数<code class="language-plaintext highlighter-rouge">strnlen</code>的检测需求。</p>

<p>然而在Windows下，默认是不会使用<code class="language-plaintext highlighter-rouge">make</code>或者<code class="language-plaintext highlighter-rouge">cmake</code>的。那么Windows下如何能识别到这个宏定义？</p>

<p>原来，该项目通过直接<code class="language-plaintext highlighter-rouge">_WIN32</code>这个宏来定义一些不同平台所需的变量：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="cp">#ifdef _WIN32
</span>	<span class="cp">#define USE_MYSQL		1	/// whether to compile MySQL support
</span>	<span class="cp">#define USE_PGSQL		0	/// whether to compile PgSQL support
</span>	<span class="cp">#define USE_ODBC		1	/// whether to compile ODBC support
</span>	<span class="cp">#define USE_LIBEXPAT	1	/// whether to compile libexpat support
</span>	<span class="cp">#define USE_LIBICONV	1	/// whether to compile iconv support
</span>	<span class="cp">#define	USE_LIBSTEMMER	0	/// whether to compile libstemmber support
</span>	<span class="cp">#define	USE_RE2			0	/// whether to compile RE2 support
</span>	<span class="cp">#define USE_RLP			0	/// whether to compile RLP support
</span>	<span class="cp">#define USE_WINDOWS		1	/// whether to compile for Windows
</span>	<span class="cp">#define USE_SYSLOG		0	/// whether to use syslog for logging
</span>
	<span class="cp">#define UNALIGNED_RAM_ACCESS	1
</span>	<span class="cp">#define USE_LITTLE_ENDIAN		1
#else
</span>	<span class="cp">#define USE_WINDOWS		0	/// whether to compile for Windows
#endif
</span></pre></td></tr></tbody></table></code></pre></div></div>
<p>通过检查源代码，并没有发现<code class="language-plaintext highlighter-rouge">HAVE_STRNLEN</code>的定义，那么解决方案就很简单了，通过查阅<code class="language-plaintext highlighter-rouge">MSDN</code>，<code class="language-plaintext highlighter-rouge">strnlen</code>是肯定存在的，所以直接加上即可：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="cp">#define HAVE_STRNLEN	1
</span></pre></td></tr></tbody></table></code></pre></div></div>
<p>再次编译，通过。</p>

<p>比起<code class="language-plaintext highlighter-rouge">cmake</code>或者<code class="language-plaintext highlighter-rouge">make</code>的方案，<code class="language-plaintext highlighter-rouge">Windows</code>总显得有点蠢是不是？是的，如果是<code class="language-plaintext highlighter-rouge">C Runtime</code>的程序，很可惜目前没有其他更合适的方法。如果是<code class="language-plaintext highlighter-rouge">Win 32</code>程序倒是可以用<code class="language-plaintext highlighter-rouge">GetProcAddress</code>和<code class="language-plaintext highlighter-rouge">LoadLibrary</code>来解决这个问题，但这不是本篇文章要讨论的课题了。</p>
:ET